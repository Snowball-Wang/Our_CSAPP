                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | #
                            | # Describe how and why you modified the baseline code.
                            | #
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x000:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            | 	# Loop header
0x000: 6222                 | 	andq %rdx,%rdx		# len <= 0?
0x002: 761400000000000000   | 	jg Loop      		# if so, goto Loop:
0x00b: 707503000000000000   | 	jmp Done
                            | 
0x014:                      | Loop:
0x014: c0f2f8ffffffffffffff | 	iaddq $-8, %rdx
0x01e: 728c01000000000000   | 	jl rest
                            | 
0x027:                      | L1:
0x027: 50a70000000000000000 | 	mrmovq (%rdi), %r10	 # read val1 from src
0x031: 50b70800000000000000 | 	mrmovq 8(%rdi), %r11 # read val2 from src+8
0x03b: 40a60000000000000000 | 	rmmovq %r10, (%rsi)	 # store val1 to dst
0x045: 62aa                 | 	andq %r10, %r10		 # val1 <= 0?
0x047: 715a00000000000000   | 	jle L2				 # if so, goto L2:
0x050: c0f00100000000000000 | 	iaddq $1, %rax		 # count++
                            | 
0x05a:                      | L2:
0x05a: 40b60800000000000000 | 	rmmovq %r11, 8(%rsi)
0x064: 50a71000000000000000 | 	mrmovq 16(%rdi), %r10
0x06e: 62bb                 | 	andq %r11, %r11
0x070: 718300000000000000   | 	jle L3
0x079: c0f00100000000000000 | 	iaddq $1, %rax
                            | 
0x083:                      | L3:
0x083: 40a61000000000000000 | 	rmmovq %r10, 16(%rsi)
0x08d: 50b71800000000000000 | 	mrmovq 24(%rdi), %r11
0x097: 62aa                 | 	andq %r10, %r10
0x099: 71ac00000000000000   | 	jle L4
0x0a2: c0f00100000000000000 | 	iaddq $1, %rax
                            | 
0x0ac:                      | L4:
0x0ac: 40b61800000000000000 | 	rmmovq %r11, 24(%rsi)
0x0b6: 50a72000000000000000 | 	mrmovq 32(%rdi), %r10
0x0c0: 62bb                 | 	andq %r11, %r11
0x0c2: 71d500000000000000   | 	jle L5
0x0cb: c0f00100000000000000 | 	iaddq $1, %rax
                            | 
0x0d5:                      | L5:
0x0d5: 40a62000000000000000 |     rmmovq %r10, 32(%rsi)
0x0df: 50b72800000000000000 | 	mrmovq 40(%rdi), %r11
0x0e9: 62aa                 | 	andq %r10, %r10
0x0eb: 71fe00000000000000   | 	jle L6
0x0f4: c0f00100000000000000 | 	iaddq $1, %rax
                            | 
0x0fe:                      | L6:
0x0fe: 40b62800000000000000 |     rmmovq %r11, 40(%rsi)
0x108: 50a73000000000000000 | 	mrmovq 48(%rdi), %r10
0x112: 62bb                 | 	andq %r11, %r11
0x114: 712701000000000000   | 	jle L7
0x11d: c0f00100000000000000 | 	iaddq $1, %rax
                            | 
0x127:                      | L7:
0x127: 40a63000000000000000 |     rmmovq %r10, 48(%rsi)
0x131: 50b73800000000000000 | 	mrmovq 56(%rdi), %r11
0x13b: 62aa                 | 	andq %r10, %r10
0x13d: 715001000000000000   | 	jle L8
0x146: c0f00100000000000000 | 	iaddq $1, %rax
                            | 
0x150:                      | L8:
0x150: 40b63800000000000000 |     rmmovq %r11, 56(%rsi)
0x15a: 62bb                 | 	andq %r11, %r11
0x15c: 716f01000000000000   | 	jle iter
0x165: c0f00100000000000000 | 	iaddq $1, %rax
                            | 
0x16f:                      | iter:
0x16f: c0f74000000000000000 | 	iaddq $64, %rdi
0x179: c0f64000000000000000 | 	iaddq $64, %rsi
0x183: 701400000000000000   | 	jmp Loop
                            | 
0x18c:                      | rest:
0x18c: c0f20800000000000000 | 	iaddq $8, %rdx
0x196: 76a801000000000000   | 	jg rest_L1
0x19f: 707503000000000000   | 	jmp Done
                            | 
0x1a8:                      | rest_L1:
0x1a8: 50a70000000000000000 | 	mrmovq (%rdi), %r10
0x1b2: 50b70800000000000000 | 	mrmovq 8(%rdi), %r11
0x1bc: 40a60000000000000000 | 	rmmovq %r10, (%rsi)
0x1c6: 62aa                 | 	andq %r10, %r10
0x1c8: 71db01000000000000   | 	jle rest_L2
0x1d1: c0f00100000000000000 | 	iaddq $1, %rax
                            | 
0x1db:                      | rest_L2:
0x1db: c0f2ffffffffffffffff | 	iaddq $-1, %rdx
0x1e5: 717503000000000000   | 	jle Done
0x1ee: 40b60800000000000000 | 	rmmovq %r11, 8(%rsi)
0x1f8: 50a71000000000000000 | 	mrmovq 16(%rdi), %r10
0x202: 62bb                 | 	andq %r11, %r11
0x204: 711702000000000000   | 	jle rest_L3
0x20d: c0f00100000000000000 | 	iaddq $1, %rax
                            | 
0x217:                      | rest_L3:
0x217: c0f2ffffffffffffffff | 	iaddq $-1, %rdx
0x221: 717503000000000000   | 	jle Done
0x22a: 40a61000000000000000 | 	rmmovq %r10, 16(%rsi)
0x234: 50b71800000000000000 | 	mrmovq 24(%rdi), %r11
0x23e: 62aa                 | 	andq %r10, %r10
0x240: 715302000000000000   | 	jle rest_L4
0x249: c0f00100000000000000 | 	iaddq $1, %rax
                            | 
0x253:                      | rest_L4:
0x253: c0f2ffffffffffffffff |     iaddq $-1, %rdx
0x25d: 717503000000000000   | 	jle Done
0x266: 40b61800000000000000 | 	rmmovq %r11, 24(%rsi)
0x270: 50a72000000000000000 | 	mrmovq 32(%rdi), %r10
0x27a: 62bb                 | 	andq %r11, %r11
0x27c: 718f02000000000000   | 	jle rest_L5
0x285: c0f00100000000000000 | 	iaddq $1, %rax
                            | 
0x28f:                      | rest_L5:
0x28f: c0f2ffffffffffffffff |     iaddq $-1, %rdx
0x299: 717503000000000000   | 	jle Done
0x2a2: 40a62000000000000000 | 	rmmovq %r10, 32(%rsi)
0x2ac: 50b72800000000000000 | 	mrmovq 40(%rdi), %r11
0x2b6: 62aa                 | 	andq %r10, %r10
0x2b8: 71cb02000000000000   | 	jle rest_L6
0x2c1: c0f00100000000000000 | 	iaddq $1, %rax
                            | 
0x2cb:                      | rest_L6:
0x2cb: c0f2ffffffffffffffff | 	iaddq $-1, %rdx
0x2d5: 717503000000000000   | 	jle Done
0x2de: 40b62800000000000000 | 	rmmovq %r11, 40(%rsi)
0x2e8: 50a73000000000000000 | 	mrmovq 48(%rdi), %r10
0x2f2: 62bb                 | 	andq %r11, %r11
0x2f4: 710703000000000000   | 	jle rest_L7
0x2fd: c0f00100000000000000 | 	iaddq $1, %rax
                            | 
0x307:                      | rest_L7:
0x307: c0f2ffffffffffffffff |     iaddq $-1, %rdx
0x311: 717503000000000000   | 	jle Done
0x31a: 40a63000000000000000 | 	rmmovq %r10, 48(%rsi)
0x324: 50b73800000000000000 | 	mrmovq 56(%rdi), %r11
0x32e: 62aa                 | 	andq %r10, %r10
0x330: 714303000000000000   | 	jle rest_L8
0x339: c0f00100000000000000 | 	iaddq $1, %rax
                            | 
0x343:                      | rest_L8:
0x343: c0f2ffffffffffffffff |     iaddq $-1, %rdx
0x34d: 717503000000000000   | 	jle Done
0x356: 40b63800000000000000 | 	rmmovq %r11, 56(%rsi)
0x360: 62bb                 | 	andq %r11, %r11
0x362: 717503000000000000   | 	jle Done
0x36b: c0f00100000000000000 | 	iaddq $1, %rax
                            | 	
                            | 
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x375:                      | Done:
0x375: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x376:                      | End:
                            | #/* $end ncopy-ys */
