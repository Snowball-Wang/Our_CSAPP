                            | #######################################################################
                            | # Test for copying block of size 63;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f48806000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f23f00000000000000 | 	irmovq $63, %rdx		# src and dst have 63 elements
0x014: 30f60804000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f70002000000000000 | 	irmovq src, %rdi	# src array
0x028: 803200000000000000   | 	call ncopy		 
0x031: 00                   | 	halt			# should halt with num nonzeros in %rax
0x032:                      | StartFun:
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | #
                            | # Describe how and why you modified the baseline code.
                            | #
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x032:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            | 	# Loop header
0x032: 6300                 | 	xorq %rax,%rax		# count = 0;
0x034: 6222                 | 	andq %rdx,%rdx		# len <= 0?
0x036: 71ff01000000000000   | 	jle Done		# if so, goto Done:
                            | 
0x03f:                      | Loop:
0x03f: c0f2fcffffffffffffff | 	iaddq $-4, %rdx
0x049: 755b00000000000000   | 	jge L1
0x052: 701c01000000000000   | 	jmp rest
                            | 
0x05b:                      | L1:
0x05b: 50a70000000000000000 | 	mrmovq (%rdi), %r10	# read val from src...
0x065: 40a60000000000000000 | 	rmmovq %r10, (%rsi)	# ...and store it to dst
0x06f: 50b70800000000000000 | 	mrmovq 8(%rdi), %r11
0x079: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x07b: 718e00000000000000   | 	jle L2				# if so, goto L2:
0x084: c0f00100000000000000 | 	iaddq $1, %rax		# count++
                            | 
0x08e:                      | L2:
0x08e: 40b60800000000000000 | 	rmmovq %r11, 8(%rsi)
0x098: 50a71000000000000000 | 	mrmovq 16(%rdi), %r10
0x0a2: 62bb                 | 	andq %r11, %r11
0x0a4: 71b700000000000000   | 	jle L3
0x0ad: c0f00100000000000000 | 	iaddq $1, %rax
                            | 
0x0b7:                      | L3:
0x0b7: 40a61000000000000000 | 	rmmovq %r10, 16(%rsi)
0x0c1: 50b71800000000000000 | 	mrmovq 24(%rdi), %r11
0x0cb: 62aa                 | 	andq %r10, %r10
0x0cd: 71e000000000000000   | 	jle L4
0x0d6: c0f00100000000000000 | 	iaddq $1, %rax
                            | 
0x0e0:                      | L4:
0x0e0: 40b61800000000000000 | 	rmmovq %r11, 24(%rsi)
0x0ea: 62bb                 | 	andq %r11, %r11
0x0ec: 71ff00000000000000   | 	jle iter
0x0f5: c0f00100000000000000 | 	iaddq $1, %rax
                            | 
0x0ff:                      | iter:
0x0ff: c0f72000000000000000 | 	iaddq $32, %rdi
0x109: c0f62000000000000000 | 	iaddq $32, %rsi
0x113: 703f00000000000000   | 	jmp Loop
                            | 
0x11c:                      | rest:
0x11c: c0f20400000000000000 | 	iaddq $4, %rdx
0x126: 763801000000000000   | 	jg rest_L1
0x12f: 70ff01000000000000   | 	jmp Done
                            | 
0x138:                      | rest_L1:
0x138: 50a70000000000000000 | 	mrmovq (%rdi), %r10
0x142: 40a60000000000000000 | 	rmmovq %r10, (%rsi)
0x14c: 50b70800000000000000 | 	mrmovq 8(%rdi), %r11
0x156: 62aa                 | 	andq %r10, %r10
0x158: 716b01000000000000   | 	jle rest_L2
0x161: c0f00100000000000000 | 	iaddq $1, %rax
                            | 
0x16b:                      | rest_L2:
0x16b: c0f2ffffffffffffffff | 	iaddq $-1, %rdx
0x175: 71ff01000000000000   | 	jle Done
0x17e: 40b60800000000000000 | 	rmmovq %r11, 8(%rsi)
0x188: 50a71000000000000000 | 	mrmovq 16(%rdi), %r10
0x192: 62bb                 | 	andq %r11, %r11
0x194: 71a701000000000000   | 	jle rest_L3
0x19d: c0f00100000000000000 | 	iaddq $1, %rax
                            | 
0x1a7:                      | rest_L3:
0x1a7: c0f2ffffffffffffffff | 	iaddq $-1, %rdx
0x1b1: 71ff01000000000000   | 	jle Done
0x1ba: 40a61000000000000000 | 	rmmovq %r10, 16(%rsi)
0x1c4: 50b71800000000000000 | 	mrmovq 24(%rdi), %r11
0x1ce: 62aa                 | 	andq %r10, %r10
0x1d0: 71e301000000000000   | 	jle rest_L4
0x1d9: c0f00100000000000000 | 	iaddq $1, %rax
                            | 
0x1e3:                      | rest_L4:
0x1e3: c0f2ffffffffffffffff | 	iaddq $-1, %rdx
0x1ed: 73ff01000000000000   | 	je Done
0x1f6: 70ff01000000000000   | 	jmp Done
                            | 
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x1ff:                      | Done:
0x1ff: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x200:                      | End:
                            | #/* $end ncopy-ys */
0x200:                      | EndFun:
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x200:                      | 	.align 8
0x200:                      | src:
0x200: ffffffffffffffff     | 	.quad -1
0x208: 0200000000000000     | 	.quad 2
0x210: 0300000000000000     | 	.quad 3
0x218: fcffffffffffffff     | 	.quad -4
0x220: fbffffffffffffff     | 	.quad -5
0x228: faffffffffffffff     | 	.quad -6
0x230: 0700000000000000     | 	.quad 7
0x238: f8ffffffffffffff     | 	.quad -8
0x240: 0900000000000000     | 	.quad 9
0x248: 0a00000000000000     | 	.quad 10
0x250: f5ffffffffffffff     | 	.quad -11
0x258: f4ffffffffffffff     | 	.quad -12
0x260: f3ffffffffffffff     | 	.quad -13
0x268: f2ffffffffffffff     | 	.quad -14
0x270: f1ffffffffffffff     | 	.quad -15
0x278: 1000000000000000     | 	.quad 16
0x280: efffffffffffffff     | 	.quad -17
0x288: eeffffffffffffff     | 	.quad -18
0x290: edffffffffffffff     | 	.quad -19
0x298: 1400000000000000     | 	.quad 20
0x2a0: ebffffffffffffff     | 	.quad -21
0x2a8: 1600000000000000     | 	.quad 22
0x2b0: 1700000000000000     | 	.quad 23
0x2b8: 1800000000000000     | 	.quad 24
0x2c0: e7ffffffffffffff     | 	.quad -25
0x2c8: 1a00000000000000     | 	.quad 26
0x2d0: e5ffffffffffffff     | 	.quad -27
0x2d8: e4ffffffffffffff     | 	.quad -28
0x2e0: e3ffffffffffffff     | 	.quad -29
0x2e8: e2ffffffffffffff     | 	.quad -30
0x2f0: 1f00000000000000     | 	.quad 31
0x2f8: 2000000000000000     | 	.quad 32
0x300: dfffffffffffffff     | 	.quad -33
0x308: deffffffffffffff     | 	.quad -34
0x310: ddffffffffffffff     | 	.quad -35
0x318: 2400000000000000     | 	.quad 36
0x320: 2500000000000000     | 	.quad 37
0x328: 2600000000000000     | 	.quad 38
0x330: d9ffffffffffffff     | 	.quad -39
0x338: d8ffffffffffffff     | 	.quad -40
0x340: d7ffffffffffffff     | 	.quad -41
0x348: 2a00000000000000     | 	.quad 42
0x350: d5ffffffffffffff     | 	.quad -43
0x358: d4ffffffffffffff     | 	.quad -44
0x360: 2d00000000000000     | 	.quad 45
0x368: d2ffffffffffffff     | 	.quad -46
0x370: d1ffffffffffffff     | 	.quad -47
0x378: 3000000000000000     | 	.quad 48
0x380: cfffffffffffffff     | 	.quad -49
0x388: ceffffffffffffff     | 	.quad -50
0x390: cdffffffffffffff     | 	.quad -51
0x398: 3400000000000000     | 	.quad 52
0x3a0: 3500000000000000     | 	.quad 53
0x3a8: 3600000000000000     | 	.quad 54
0x3b0: 3700000000000000     | 	.quad 55
0x3b8: 3800000000000000     | 	.quad 56
0x3c0: 3900000000000000     | 	.quad 57
0x3c8: 3a00000000000000     | 	.quad 58
0x3d0: 3b00000000000000     | 	.quad 59
0x3d8: 3c00000000000000     | 	.quad 60
0x3e0: 3d00000000000000     | 	.quad 61
0x3e8: 3e00000000000000     | 	.quad 62
0x3f0: 3f00000000000000     | 	.quad 63
0x3f8: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x400:                      | 	.align 16
0x400:                      | Predest:
0x400: fadebc0000000000     | 	.quad 0xbcdefa
0x408:                      | dest:
0x408: abefcd0000000000     | 	.quad 0xcdefab
0x410: abefcd0000000000     | 	.quad 0xcdefab
0x418: abefcd0000000000     | 	.quad 0xcdefab
0x420: abefcd0000000000     | 	.quad 0xcdefab
0x428: abefcd0000000000     | 	.quad 0xcdefab
0x430: abefcd0000000000     | 	.quad 0xcdefab
0x438: abefcd0000000000     | 	.quad 0xcdefab
0x440: abefcd0000000000     | 	.quad 0xcdefab
0x448: abefcd0000000000     | 	.quad 0xcdefab
0x450: abefcd0000000000     | 	.quad 0xcdefab
0x458: abefcd0000000000     | 	.quad 0xcdefab
0x460: abefcd0000000000     | 	.quad 0xcdefab
0x468: abefcd0000000000     | 	.quad 0xcdefab
0x470: abefcd0000000000     | 	.quad 0xcdefab
0x478: abefcd0000000000     | 	.quad 0xcdefab
0x480: abefcd0000000000     | 	.quad 0xcdefab
0x488: abefcd0000000000     | 	.quad 0xcdefab
0x490: abefcd0000000000     | 	.quad 0xcdefab
0x498: abefcd0000000000     | 	.quad 0xcdefab
0x4a0: abefcd0000000000     | 	.quad 0xcdefab
0x4a8: abefcd0000000000     | 	.quad 0xcdefab
0x4b0: abefcd0000000000     | 	.quad 0xcdefab
0x4b8: abefcd0000000000     | 	.quad 0xcdefab
0x4c0: abefcd0000000000     | 	.quad 0xcdefab
0x4c8: abefcd0000000000     | 	.quad 0xcdefab
0x4d0: abefcd0000000000     | 	.quad 0xcdefab
0x4d8: abefcd0000000000     | 	.quad 0xcdefab
0x4e0: abefcd0000000000     | 	.quad 0xcdefab
0x4e8: abefcd0000000000     | 	.quad 0xcdefab
0x4f0: abefcd0000000000     | 	.quad 0xcdefab
0x4f8: abefcd0000000000     | 	.quad 0xcdefab
0x500: abefcd0000000000     | 	.quad 0xcdefab
0x508: abefcd0000000000     | 	.quad 0xcdefab
0x510: abefcd0000000000     | 	.quad 0xcdefab
0x518: abefcd0000000000     | 	.quad 0xcdefab
0x520: abefcd0000000000     | 	.quad 0xcdefab
0x528: abefcd0000000000     | 	.quad 0xcdefab
0x530: abefcd0000000000     | 	.quad 0xcdefab
0x538: abefcd0000000000     | 	.quad 0xcdefab
0x540: abefcd0000000000     | 	.quad 0xcdefab
0x548: abefcd0000000000     | 	.quad 0xcdefab
0x550: abefcd0000000000     | 	.quad 0xcdefab
0x558: abefcd0000000000     | 	.quad 0xcdefab
0x560: abefcd0000000000     | 	.quad 0xcdefab
0x568: abefcd0000000000     | 	.quad 0xcdefab
0x570: abefcd0000000000     | 	.quad 0xcdefab
0x578: abefcd0000000000     | 	.quad 0xcdefab
0x580: abefcd0000000000     | 	.quad 0xcdefab
0x588: abefcd0000000000     | 	.quad 0xcdefab
0x590: abefcd0000000000     | 	.quad 0xcdefab
0x598: abefcd0000000000     | 	.quad 0xcdefab
0x5a0: abefcd0000000000     | 	.quad 0xcdefab
0x5a8: abefcd0000000000     | 	.quad 0xcdefab
0x5b0: abefcd0000000000     | 	.quad 0xcdefab
0x5b8: abefcd0000000000     | 	.quad 0xcdefab
0x5c0: abefcd0000000000     | 	.quad 0xcdefab
0x5c8: abefcd0000000000     | 	.quad 0xcdefab
0x5d0: abefcd0000000000     | 	.quad 0xcdefab
0x5d8: abefcd0000000000     | 	.quad 0xcdefab
0x5e0: abefcd0000000000     | 	.quad 0xcdefab
0x5e8: abefcd0000000000     | 	.quad 0xcdefab
0x5f0: abefcd0000000000     | 	.quad 0xcdefab
0x5f8: abefcd0000000000     | 	.quad 0xcdefab
0x600:                      | Postdest:
0x600: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x608:                      | .align 8
                            | # Run time stack
0x608: 0000000000000000     | 	.quad 0
0x610: 0000000000000000     | 	.quad 0
0x618: 0000000000000000     | 	.quad 0
0x620: 0000000000000000     | 	.quad 0
0x628: 0000000000000000     | 	.quad 0
0x630: 0000000000000000     | 	.quad 0
0x638: 0000000000000000     | 	.quad 0
0x640: 0000000000000000     | 	.quad 0
0x648: 0000000000000000     | 	.quad 0
0x650: 0000000000000000     | 	.quad 0
0x658: 0000000000000000     | 	.quad 0
0x660: 0000000000000000     | 	.quad 0
0x668: 0000000000000000     | 	.quad 0
0x670: 0000000000000000     | 	.quad 0
0x678: 0000000000000000     | 	.quad 0
0x680: 0000000000000000     | 	.quad 0
                            | 
0x688:                      | Stack:
