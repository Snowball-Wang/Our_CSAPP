#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Include your name and ID here.
#
# Describe how and why you modified the baseline code.
#
# refer to https://zhuanlan.zhihu.com/p/77072339 for more details 
# if you are interested in the full score version
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
# You can modify this portion
	# Loop header
	iaddq $-10, %rdx	# len >= 10?
	jl Tail			# if so, goto Tail

Loop1:	
	mrmovq (%rdi), %r10	# read val1 from src[0]
	mrmovq 8(%rdi), %r11	# read val2 from src[1]
	rmmovq %r10, (%rsi)	# store val1 to dst[0]
	andq %r10, %r10		# val1 <= 0?
	jle Loop2		# if so, goto Loop2
	iaddq $1, %rax		# count++
Loop2:
	mrmovq 16(%rdi), %r10	# read val3 from src[2]
	rmmovq %r11, 8(%rsi)	# store val2 to dst[1]
	andq %r11, %r11		# val2 <= 0?
	jle Loop3		# if so, goto Loop3
	iaddq $1, %rax		# count++
Loop3:
	mrmovq 24(%rdi), %r11	# read val4 from src[3]
	rmmovq %r10, 16(%rsi)	# store val3 to dst[2]
	andq %r10, %r10		# val3 <= 0?
	jle Loop4		# if so, goto Loop4
	iaddq $1, %rax		# count++
Loop4:
	mrmovq 32(%rdi), %r10	# read val5 from src[4]
	rmmovq %r11, 24(%rsi)	# store val4 to dst[3]
	andq %r11, %r11		# val4 <= 0?
	jle Loop5		# if so, goto Loop5
	iaddq $1, %rax		# count++
Loop5:
	mrmovq 40(%rdi), %r11	# read val6 from src[5]
	rmmovq %r10, 32(%rsi)	# store val5 to dst[4]
	andq %r10, %r10		# val5 <= 0?
	jle Loop6		# if so, goto Loop6
	iaddq $1, %rax		# count++
Loop6:
	mrmovq 48(%rdi), %r10	# read val7 from src[6]
	rmmovq %r11, 40(%rsi)	# store val6 to dst[5]
	andq %r11, %r11		# val6 <= 0?
	jle Loop7		# if so, goto Loop7
	iaddq $1, %rax		# count++
Loop7:
	mrmovq 56(%rdi), %r11	# read val8 from src[7]
	rmmovq %r10, 48(%rsi)	# store val7 to dst[6]
	andq %r10, %r10		# val7 <= 0?
	jle Loop8		# if so, goto Loop8
	iaddq $1, %rax		# count++
Loop8:
	mrmovq 64(%rdi), %r10	# read val9 from src[8]
	rmmovq %r11, 56(%rsi)	# store val8 to dst[7]
	andq %r11, %r11		# val8 <= 0?
	jle Loop9		# if so, goto Loop9
	iaddq $1, %rax		# count++
Loop9:
	mrmovq 72(%rdi), %r11	# read val10 from src[9]
	rmmovq %r10, 64(%rsi)	# store val9 to dst[8]
	andq %r10, %r10		# val9 <= 0?
	jle Loop10		# if so, goto Loop10
	iaddq $1, %rax		# count++
Loop10:
	rmmovq %r11, 72(%rsi)	# store val10 to dst[9]
	andq %r11, %r11		# val10 <= 0?
	jle Loop		# if so, goto Loop
	iaddq $1, %rax		# count++
Loop:
	iaddq $80, %rdi		# src+10
	iaddq $80, %rsi		# dst+10
	iaddq $-10, %rdx	# len = len -10
	jge Loop1		# goto Loop1
Tail:
	iaddq $7, %rdx		# len <= 3
	jl Tail_left
	jg Tail_right
	jmp Tail3		# len == 3
Tail_left:
	iaddq $2, %rdx
	je Tail1		# len == 1
	iaddq $-1, %rdx
	je Tail2		# len == 2
	ret			# len == 0
Tail_right:
	iaddq $-3, %rdx
	jg Tail_right2		# len > 6
	je Tail6		# len == 6
	iaddq $1, %rdx		# the left tree of right tree
	je Tail5		# len == 5
	jmp Tail4		# len == 4
Tail_right2:
	iaddq $-2, %rdx
	jl Tail7		# len == 7
	je Tail8		# len == 8
# len == 9
Tail9:
	mrmovq 64(%rdi), %r9	# read val9 from src[8]
	rmmovq %r9, 64(%rsi)	# store val9 to dst[8]
	andq %r9, %r9
Tail8:
	mrmovq 56(%rdi), %r9	# read val8 from src[7]
	jle Tail8_1		# val9 <= 0?
	iaddq $1, %rax		# count++
Tail8_1:
	rmmovq %r9, 56(%rsi)	# store val8 to dst[7]
	andq %r9, %r9
Tail7:
	mrmovq 48(%rdi), %r9	# read val7 from src[6]
	jle Tail7_1		# val8 <= 0?
	iaddq $1, %rax		# count++
Tail7_1:
	rmmovq %r9, 48(%rsi)	# store val7 to dst[6]
	andq %r9, %r9
Tail6:
	mrmovq 40(%rdi), %r9	# read val6 from src[5]
	jle Tail6_1		# val7 <= 0?
	iaddq $1, %rax		# count++
Tail6_1:
	rmmovq %r9, 40(%rsi)	# store val6 to dst[5]
	andq %r9, %r9
Tail5:
	mrmovq 32(%rdi), %r9	# read val5 from src[4]
	jle Tail5_1		# val6 <= 0?
	iaddq $1, %rax		# count++
Tail5_1:
	rmmovq %r9, 32(%rsi)	# store val5 to dst[4]
	andq %r9, %r9
Tail4:
	mrmovq 24(%rdi), %r9	# read val4 from src[3]
	jle Tail4_1		# val5 <= 0?
	iaddq $1, %rax		# count++
Tail4_1:
	rmmovq %r9, 24(%rsi)	# store val4 to dst[3]
	andq %r9, %r9
Tail3:
	mrmovq 16(%rdi), %r9	# read val3 from src[2]
	jle Tail3_1		# val4 <= 0?
	iaddq $1, %rax		# count++
Tail3_1:
	rmmovq %r9, 16(%rsi)	# store val3 to dst[2]
	andq %r9, %r9
Tail2:
	mrmovq 8(%rdi), %r9	# read val2 from src[1]
	jle Tail2_1		# val3 <= 0?
	iaddq $1, %rax		# count++
Tail2_1:
	rmmovq %r9, 8(%rsi)	# store val2 to dst[1]
	andq %r9, %r9
Tail1:
	mrmovq (%rdi), %r9	# read val1 from src[0]
	jle Tail1_1		# val2 <= 0?
	iaddq $1, %rax		
Tail1_1:
	rmmovq %r9, (%rsi)	# store val1 to dst[0]
	andq %r9, %r9		# val1 <= 0?
	jle Done		# if so, goto Done
	iaddq $1, %rax		# count++
##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
