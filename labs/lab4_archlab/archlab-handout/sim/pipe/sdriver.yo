                            | #######################################################################
                            | # Test for copying block of size 4;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f4e002000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f20400000000000000 | 	irmovq $4, %rdx		# src and dst have 4 elements
0x014: 30f63802000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f70002000000000000 | 	irmovq src, %rdi	# src array
0x028: 803200000000000000   | 	call ncopy		 
0x031: 00                   | 	halt			# should halt with num nonzeros in %rax
0x032:                      | StartFun:
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | #
                            | # Describe how and why you modified the baseline code.
                            | #
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x032:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            | 	# Loop header
0x032: 6300                 | 	xorq %rax,%rax		# count = 0;
0x034: 6222                 | 	andq %rdx,%rdx		# len <= 0?
0x036: 71ff01000000000000   | 	jle Done		# if so, goto Done:
                            | 
0x03f:                      | Loop:
0x03f: c0f2fcffffffffffffff | 	iaddq $-4, %rdx
0x049: 755b00000000000000   | 	jge L1
0x052: 701c01000000000000   | 	jmp rest
                            | 
0x05b:                      | L1:
0x05b: 50a70000000000000000 | 	mrmovq (%rdi), %r10	# read val from src...
0x065: 40a60000000000000000 | 	rmmovq %r10, (%rsi)	# ...and store it to dst
0x06f: 50b70800000000000000 | 	mrmovq 8(%rdi), %r11
0x079: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x07b: 718e00000000000000   | 	jle L2				# if so, goto L2:
0x084: c0f00100000000000000 | 	iaddq $1, %rax		# count++
                            | 
0x08e:                      | L2:
0x08e: 40b60800000000000000 | 	rmmovq %r11, 8(%rsi)
0x098: 50a71000000000000000 | 	mrmovq 16(%rdi), %r10
0x0a2: 62bb                 | 	andq %r11, %r11
0x0a4: 71b700000000000000   | 	jle L3
0x0ad: c0f00100000000000000 | 	iaddq $1, %rax
                            | 
0x0b7:                      | L3:
0x0b7: 40a61000000000000000 | 	rmmovq %r10, 16(%rsi)
0x0c1: 50b71800000000000000 | 	mrmovq 24(%rdi), %r11
0x0cb: 62aa                 | 	andq %r10, %r10
0x0cd: 71e000000000000000   | 	jle L4
0x0d6: c0f00100000000000000 | 	iaddq $1, %rax
                            | 
0x0e0:                      | L4:
0x0e0: 40b61800000000000000 | 	rmmovq %r11, 24(%rsi)
0x0ea: 62bb                 | 	andq %r11, %r11
0x0ec: 71ff00000000000000   | 	jle iter
0x0f5: c0f00100000000000000 | 	iaddq $1, %rax
                            | 
0x0ff:                      | iter:
0x0ff: c0f72000000000000000 | 	iaddq $32, %rdi
0x109: c0f62000000000000000 | 	iaddq $32, %rsi
0x113: 703f00000000000000   | 	jmp Loop
                            | 
0x11c:                      | rest:
0x11c: c0f20400000000000000 | 	iaddq $4, %rdx
0x126: 763801000000000000   | 	jg rest_L1
0x12f: 70ff01000000000000   | 	jmp Done
                            | 
0x138:                      | rest_L1:
0x138: 50a70000000000000000 | 	mrmovq (%rdi), %r10
0x142: 40a60000000000000000 | 	rmmovq %r10, (%rsi)
0x14c: 50b70800000000000000 | 	mrmovq 8(%rdi), %r11
0x156: 62aa                 | 	andq %r10, %r10
0x158: 716b01000000000000   | 	jle rest_L2
0x161: c0f00100000000000000 | 	iaddq $1, %rax
                            | 
0x16b:                      | rest_L2:
0x16b: c0f2ffffffffffffffff | 	iaddq $-1, %rdx
0x175: 71ff01000000000000   | 	jle Done
0x17e: 40b60800000000000000 | 	rmmovq %r11, 8(%rsi)
0x188: 50a71000000000000000 | 	mrmovq 16(%rdi), %r10
0x192: 62bb                 | 	andq %r11, %r11
0x194: 71a701000000000000   | 	jle rest_L3
0x19d: c0f00100000000000000 | 	iaddq $1, %rax
                            | 
0x1a7:                      | rest_L3:
0x1a7: c0f2ffffffffffffffff | 	iaddq $-1, %rdx
0x1b1: 71ff01000000000000   | 	jle Done
0x1ba: 40a61000000000000000 | 	rmmovq %r10, 16(%rsi)
0x1c4: 50b71800000000000000 | 	mrmovq 24(%rdi), %r11
0x1ce: 62aa                 | 	andq %r10, %r10
0x1d0: 71e301000000000000   | 	jle rest_L4
0x1d9: c0f00100000000000000 | 	iaddq $1, %rax
                            | 
0x1e3:                      | rest_L4:
0x1e3: c0f2ffffffffffffffff | 	iaddq $-1, %rdx
0x1ed: 73ff01000000000000   | 	je Done
0x1f6: 70ff01000000000000   | 	jmp Done
                            | 
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x1ff:                      | Done:
0x1ff: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x200:                      | End:
                            | #/* $end ncopy-ys */
0x200:                      | EndFun:
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x200:                      | 	.align 8
0x200:                      | src:
0x200: 0100000000000000     | 	.quad 1
0x208: 0200000000000000     | 	.quad 2
0x210: fdffffffffffffff     | 	.quad -3
0x218: fcffffffffffffff     | 	.quad -4
0x220: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x230:                      | 	.align 16
0x230:                      | Predest:
0x230: fadebc0000000000     | 	.quad 0xbcdefa
0x238:                      | dest:
0x238: abefcd0000000000     | 	.quad 0xcdefab
0x240: abefcd0000000000     | 	.quad 0xcdefab
0x248: abefcd0000000000     | 	.quad 0xcdefab
0x250: abefcd0000000000     | 	.quad 0xcdefab
0x258:                      | Postdest:
0x258: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x260:                      | .align 8
                            | # Run time stack
0x260: 0000000000000000     | 	.quad 0
0x268: 0000000000000000     | 	.quad 0
0x270: 0000000000000000     | 	.quad 0
0x278: 0000000000000000     | 	.quad 0
0x280: 0000000000000000     | 	.quad 0
0x288: 0000000000000000     | 	.quad 0
0x290: 0000000000000000     | 	.quad 0
0x298: 0000000000000000     | 	.quad 0
0x2a0: 0000000000000000     | 	.quad 0
0x2a8: 0000000000000000     | 	.quad 0
0x2b0: 0000000000000000     | 	.quad 0
0x2b8: 0000000000000000     | 	.quad 0
0x2c0: 0000000000000000     | 	.quad 0
0x2c8: 0000000000000000     | 	.quad 0
0x2d0: 0000000000000000     | 	.quad 0
0x2d8: 0000000000000000     | 	.quad 0
                            | 
0x2e0:                      | Stack:
