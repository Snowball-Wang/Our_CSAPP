                            | # rsum_list - Recursive version of sum_list
                            | # Execution begins at address 0
0x000:                      | 	.pos 0 
0x000: 30f40020000000000000 | 	irmovq stack, %rsp     # Set up stack pointer
0x00a: 804800000000000000   | 	call main              # Call main
0x013: 00                   | 	halt
                            | 
                            | # Sample linked list
0x018:                      | 	.align 8
0x018:                      | ele1:
0x018: 0a00000000000000     | 	.quad 0x00a
0x020: 2800000000000000     | 	.quad ele2
0x028:                      | ele2:
0x028: b000000000000000     | 	.quad 0x0b0
0x030: 3800000000000000     | 	.quad ele3
0x038:                      | ele3:
0x038: 000c000000000000     | 	.quad 0xc00
0x040: 0000000000000000     | 	.quad 0
                            | 
0x048:                      | main:
0x048: 30f71800000000000000 | 	irmovq ele1, %rdi      # rsum_list(linkedlist)
0x052: 805c00000000000000   | 	call rsum_list         # Execute rsum_list program
0x05b: 90                   | 	ret
                            | # long rsum_list(list_ptr ls)
                            | # ls in %rdi
0x05c:                      | rsum_list:
0x05c: a03f                 | 	pushq %rbx             # Save $rbx
0x05e: 6300                 | 	xorq %rax, %rax        # Set $rax to zero
0x060: 6277                 | 	andq %rdi, %rdi        # Set CC
0x062: 738c00000000000000   | 	je test                # Go to test
0x06b: 50370000000000000000 | 	mrmovq (%rdi), %rbx    # Store the value of the node in $rbx
0x075: 50870800000000000000 | 	mrmovq 8(%rdi), %r8    # The address of next node
0x07f: 2087                 | 	rrmovq %r8, %rdi       # Pass the argument for rsum_list
0x081: 805c00000000000000   | 	call rsum_list         # Call rsum_list
0x08a: 6030                 | 	addq %rbx, %rax        # Add the value
                            | 
0x08c:                      | test:
0x08c: b03f                 | 	popq %rbx              # Restore $rbx
0x08e: 90                   | 	ret                    # Return
                            | 
                            | # Stack starts here and grows to lower addresses
0x2000:                      | 	.pos 0x2000
0x2000:                      | stack:
