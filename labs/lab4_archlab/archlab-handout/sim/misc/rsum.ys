# rsum_list - Recursive version of sum_list
# Execution begins at address 0
	.pos 0 
	irmovq stack, %rsp     # Set up stack pointer
	irmovq ele1, %rdi      # rsum_list(linkedlist)
	call rsum_list         # Execute rsum_list program
	halt

# Sample linked list
	.align 8
ele1:
	.quad 0x00a
	.quad ele2
ele2:
	.quad 0x0b0
	.quad ele3
ele3:
	.quad 0xc00
	.quad 0

# long rsum_list(list_ptr ls)
# ls in %rdi
rsum_list:
	pushq %rbx             # Save $rbx
	xorq %rax, %rax        # Set $rax to zero
	andq %rdi, %rdi        # Set CC
	je test                # Go to test
	mrmovq (%rdi), %rbx    # Store the value of the node in $rbx
	mrmovq 8(%rdi), %r8    # The address of next node
	rrmovq %r8, %rdi       # Pass the argument for rsum_list
	call rsum_list         # Call rsum_list
	addq %rbx, %rax        # Add the value

test:
	popq %rbx              # Restore $rbx
	ret                    # Return

# Stack starts here and grows to lower addresses
	.pos 0x2000
stack:
