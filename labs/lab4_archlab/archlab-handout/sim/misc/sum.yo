                            | # sum_list - Sum the elements of a linked list
                            | # Execution begins at address 0
0x000:                      | 	.pos 0 
0x000: 30f40020000000000000 | 	irmovq stack, %rsp    # Set up stack pointer
0x00a: 804800000000000000   | 	call main             # Call main
0x013: 00                   | 	halt
                            | 
                            | # Sample linked list
0x018:                      | 	.align 8
0x018:                      | ele1:
0x018: 0a00000000000000     | 	.quad 0x00a
0x020: 2800000000000000     | 	.quad ele2
0x028:                      | ele2:
0x028: b000000000000000     | 	.quad 0x0b0
0x030: 3800000000000000     | 	.quad ele3
0x038:                      | ele3:
0x038: 000c000000000000     | 	.quad 0xc00
0x040: 0000000000000000     | 	.quad 0
                            | 
0x048:                      | main:
0x048: 30f71800000000000000 | 	irmovq ele1, %rdi     # sum_list(linkedlist)
0x052: 805c00000000000000   | 	call sum_list         # Execute sum_list program
0x05b: 90                   | 	ret
                            | # long sum_list(list_ptr ls)
                            | # ls in %rdi
0x05c:                      | sum_list:
0x05c: 30f81000000000000000 | 	irmovq $16, %r8       # Set the constant 16
0x066: 6300                 | 	xorq %rax, %rax       # Set $rax to 0
                            | 
0x068:                      | loop:
0x068: 50970000000000000000 | 	mrmovq (%rdi), %r9    # Read the value in the node
0x072: 6090                 | 	addq %r9, %rax        # Add the value in the node
0x074: 50270800000000000000 | 	mrmovq 8(%rdi), %rdx  # Read the next pointer
0x07e: 6222                 | 	andq %rdx, %rdx       # Set CC
0x080: 748a00000000000000   | 	jne test              # Go to test
0x089: 90                   | 	ret                   # Return
                            | 
0x08a:                      | test:
0x08a: 6087                 | 	addq %r8, %rdi        # Move $rdi to the next node
0x08c: 706800000000000000   | 	jmp loop              # Go to loop
                            | 
                            | # Stack starts here and grows to lower addresses
0x2000:                      | 	.pos 0x2000
0x2000:                      | stack:
