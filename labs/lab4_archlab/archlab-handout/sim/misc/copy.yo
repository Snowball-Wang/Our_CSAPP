                            | # copy_block - Copy src to dest and return xor checksum of src 
                            | # Execution begins at address 0
0x000:                      | 	.pos 0 
0x000: 30f40020000000000000 | 	irmovq stack, %rsp    # Set up stack pointer
0x00a: 30f73800000000000000 | 	irmovq src, %rdi      
0x014: 30f65000000000000000 | 	irmovq dest, %rsi
0x01e: 30f20300000000000000 | 	irmovq $3, %rdx       # copy_block(src, dest, len)
0x028: 806800000000000000   | 	call copy_block       # Execute copy_block program
0x031: 00                   | 	halt
                            | 
                            | # Source block
0x038:                      | 	.align 8
0x038:                      | src:
0x038: 0a00000000000000     | 	.quad 0x00a
0x040: b000000000000000     | 	.quad 0x0b0
0x048: 000c000000000000     | 	.quad 0xc00
                            | 
                            | # Destination block
0x050:                      | dest:
0x050: 1101000000000000     | 	.quad 0x111
0x058: 2202000000000000     | 	.quad 0x222
0x060: 3303000000000000     | 	.quad 0x333
                            | 
                            | 
                            | # long copy_block(long *src, long *dest, long len)
                            | # src in %rdi, dest in %rsi, len in %rdx
0x068:                      | copy_block:
0x068: 30f80800000000000000 | 	irmovq $8, %r8        # Set the constant 8
0x072: 30f90100000000000000 | 	irmovq $1, %r9        # Set the constant 1
0x07c: 6300                 | 	xorq %rax, %rax       # Set $rax to 0
0x07e: 70a300000000000000   | 	jmp test
                            | 
0x087:                      | loop:
0x087: 50a70000000000000000 | 	mrmovq (%rdi), %r10   # Get val
0x091: 6087                 | 	addq %r8, %rdi        # src++
0x093: 40a60000000000000000 | 	rmmovq %r10, (%rsi)   # *dest = val
0x09d: 6086                 | 	addq %r8, %rsi        # dest++
0x09f: 63a0                 | 	xorq %r10, %rax       # result ^= val
0x0a1: 6192                 | 	subq %r9, %rdx        # len--
                            | 	
0x0a3:                      | test:
0x0a3: 6222                 | 	andq %rdx, %rdx       # Set CC
0x0a5: 748700000000000000   | 	jne loop              # Go to loop
0x0ae: 90                   | 	ret
                            | 
                            | # Stack starts here and grows to lower addresses
0x2000:                      | 	.pos 0x2000
0x2000:                      | stack:
